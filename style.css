

* {

margin: 0;

padding: 0;

box-sizing: border-box;

}


body {

font-family: 'Segoe UI', sans-serif;

background-color: #f4f4f4;

color: #333;

}


header {

background-color: #004080;

color: white;

padding: 20px;

text-align: center;

}


nav {

margin-top: 10px;

}


nav a {

color: white;

text-decoration: none;

margin: 0 15px;

font-weight: bold;

}


nav a:hover {

text-decoration: underline;

}


main {

padding: 30px;

background-color: #ffffff;

margin: 20px auto;

max-width: 900px;

border-radius: 10px;

box-shadow: 0 2px 8px rgba(0,0,0,0.1);

}


section h2 {

margin-bottom: 15px;

color: #004080;

}


footer {

text-align: center;

background-color: #222;

color: white;

padding: 15px;

position: relative;

bottom: 0;

width: 100%;
}

















































































































































































































































































































































































/* portfolio <!DOCTYPE html> 

<html lang="en"> 

<head> 

  <meta charset="UTF-8"> 

  <title>Udayakumar P | Portfolio</title> 

  <link rel="stylesheet" href="style.css"> 

</head> 

<body> 

 

  <header> 

    <h1>Udayakumar P</h1> 

    <p>PhD Research Scholar | AI in Neuroimaging</p> 

  </header> 

 

  <section id="about"> 

    <h2>About Me</h2> 

    <p>I am a PhD scholar at VIT, working on brain connectome mapping using deep learning. I specialize in AI, neuroimaging, and graph-based modeling.</p> 

  </section> 

 

  <section id="education"> 

    <h2>Education</h2> 

    <ul> 

      <li>PhD in Computer Science and Engineering, VIT</li> 

      <li>M.E. in Computer Science, Anna University</li> 

      <li>B.E. in Computer Science, Anna University</li> 

    </ul> 

  </section> 

 

  <section id="skills"> 

    <h2>Skills</h2> 

    <ul> 

      <li>Python, MATLAB, R</li> 

      <li>TensorFlow, PyTorch</li> 

      <li>Git, HTML, CSS</li> 

      <li>FSL, FreeSurfer, SPM12, ANTs</li> 

    </ul> 

  </section> 

 

  <section id="projects"> 

    <h2>Projects</h2> 

    <ul> 

      <li>Connectome-based Schizophrenia Prediction using GNN</li> 

      <li>Multimodal Brain Classification with Graph Attention Network</li> 

      <li>fMRI Functional Connectivity Matrix Generator</li> 

    </ul> 

  </section> 

 

  <section id="contact"> 

    <h2>Contact</h2> 

    <p>Email: udaya@example.com</p> 

    <p>LinkedIn: <a href="https://linkedin.com/in/udayakumar-palanivelu-934bb941">Profile</a></p> 

    <p>GitHub: <a href="https://github.com/udayameister">Profile</a></p> 

  </section> 

 

  <footer> 

    <p>&copy; 2025 Udayakumar P. All rights reserved.</p> 

  </footer> 

 

</body> 

</html> 

 

style.css: 

 

body { 

  font-family: Arial, sans-serif; 

  margin: 0; 

  background-color: #f2f2f2; 

  color: #333; 

} 

 

header { 

  background-color: #007acc; 

  color: white; 

  padding: 30px; 

  text-align: center; 

} 

 

section { 

  padding: 20px; 

  background-color: white; 

  margin: 20px; 

  border-radius: 10px; 

  box-shadow: 0 2px 5px rgba(0,0,0,0.1); 

} 

 

h2 { 

  color: #007acc; 

} 

 

ul { 

  list-style: square; 

  padding-left: 20px; 

} 

 

footer { 

  background-color: #333; 

  color: white; 

  text-align: center; 

  padding: 10px;  */ 

/*1
/* 1e 1. Initialize a Git Repository Locally (git init) 

➤ Steps: 

Open Terminal or Git Bash 

Create a project folder 

mkdir portfolio-site 

cd portfolio-site 

Initialize Git: 

git init 

This creates a hidden .git folder inside the directory. 

 

2. Create a Sample HTML File 

echo "<!DOCTYPE html><html><head><title>My Portfolio</title></head><body><h1>Welcome!</h1></body></html>" > index.html 

 

3. Commit Changes (git add, git commit) 

➤ Steps: 

git add index.html 

git commit -m "Initial commit: Added basic portfolio page" 

This saves the changes to the local repository. 

 

4. Create a New Branch (git branch) 

➤ Steps: 

git branch about 

git checkout about 

Or shortcut: 

git checkout -b about 

You are now working on a separate branch named about. 

 

5. Make Changes on Branch and Commit 

Open index.html and add the following before </body>: 

<p>This is the about section.</p> 

Then: 

git add index.html 

git commit -m "Added about section" 

 

6. Merge Branch with Main (git merge) 

Switch to main branch: 

git checkout ( go to main) 

Then merge: 

git merge about 

Changes from about branch are now merged into main. 

 

7. Push to GitHub (Remote Version Control) 

➤ Steps: 

Create a new repository on GitHub (e.g., portfolio-site) 

Connect local repo to GitHub: 

git remote add origin https://github.com/<your-username>/portfolio-site.git 

git push -u origin main 

 

8. Clone Repository (git clone) 

You can now clone the repository on another system or folder: 

git clone https://github.com/<your-username>/portfolio-site.git 

This copies the entire project (including history and branches) to a new location. 

 

 */

/* 2.a Source Code: 

index.html 

<!DOCTYPE html> 

<html lang="en"> 

<head> 

  <meta charset="UTF-8"> 

  <title>JavaScript Basics</title> 

  <style> 

    body { 

      font-family: Arial, sans-serif; 

      margin: 20px; 

      background-color: #f9f9f9; 

    } 

    #output { 

      background: #fff; 

      padding: 15px; 

      border-radius: 10px; 

      box-shadow: 0 2px 5px rgba(0,0,0,0.1); 

    } 

    h1 { color: #007acc; } 

  </style> 

</head> 

<body> 

 

  <h1>JavaScript Program — Variables, Functions, and Objects</h1> 

  <div id="output"></div> 

 

  <script> 

    // --- VARIABLES --- 

    let name = "Suresh";   // block-scoped variable 

    const pi = 3.14159;     // constant 

    var age = 25;           // function-scoped (legacy) 

 

    // --- FUNCTIONS --- 

    function greet(userName) { 

      return "Hello, " + userName + "!"; 

    } 

    const square = (num) => num * num;   // arrow function 

 

    // --- OBJECT --- 

    const student = { 

      id: 101, 

      fullName: "Sita Ram", 

      marks: { math: 85, science: 92 }, 

      displayInfo: function() { 

        return `ID: ${this.id}, Name: ${this.fullName}`; 

      } 

    }; 

 

    // --- OUTPUT TO PAGE --- 

    const out = document.getElementById("output"); 

    out.innerHTML = ` 

      <p><b>Variables:</b><br> 

         name = ${name}, age = ${age}, pi = ${pi}</p> 

      <p><b>Functions:</b><br> 

         greet("Suresh") → ${greet(name)}<br> 

         square(5) → ${square(5)}</p> 

      <p><b>Object:</b><br> 

         student.displayInfo() → ${student.displayInfo()}<br> 

         Math Marks = ${student.marks.math}, Science Marks = ${student.marks.science}</p> 

    `; 

  </script> 

 

</body> 

</html> */



/*2bSource Code: 

index.html 

<!DOCTYPE html> 

<html lang="en"> 

<head> 

  <meta charset="UTF-8"> 

  <title>AJAX Form</title> 

</head> 

<body> 

  <h1>AJAX Form Example</h1> 

  <form id="contactForm"> 

    <label>Name: <input type="text" name="name" required></label><br><br> 

    <label>Email: <input type="email" name="email" required></label><br><br> 

    <button type="submit">Submit</button> 

  </form> 

  <h2>Saved Contacts</h2> 

  <ul id="contactList"></ul> 

  <script src="main.js"></script> 

</body> 

</html> 

------------------------------------------------- 

main.js 

const API = "https://jsonplaceholder.typicode.com/users"; // Mock server 

const form = document.getElementById("contactForm"); 

const list = document.getElementById("contactList"); 

// Initial fetch (load existing 10 dummy users) 

async function fetchContacts() { 

  const res = await fetch(API); 

  const users = await res.json(); 

  render(users); 

} 

// Handle form submission 

form.addEventListener("submit", async (e) => { 

  e.preventDefault(); 

  const data = Object.fromEntries(new FormData(form)); 

  // Send POST request (fake save on JSONPlaceholder) 

  const res = await fetch(API, { 

    method: "POST", 

    headers: { "Content-Type": "application/json" }, 

    body: JSON.stringify(data) 

  }); 

  // Get the fake response (server returns data with an id) 

  const created = await res.json(); 

  // ✅ Append new contact directly to the list 

  list.insertAdjacentHTML("beforeend", `<li>${created.name} — ${created.email}</li>`); 

  // Clear form 

  form.reset(); 

}); 

// Render function 

function render(users) { 

  list.innerHTML = users.map(u => `<li>${u.name} — ${u.email}</li>`).join(""); 

} */

/*2cSource Code: 

index.html 

<!DOCTYPE html> 

<html lang="en"> 

<head> 

  <meta charset="UTF-8"> 

  <title>jQuery Validation</title> 

</head> 

<body> 

  <h1>Registration Form</h1> 

  <form id="regForm"> 

    <div><label>Name: <input name="name"></label> <span class="err"></span></div> 

    <div><label>Email: <input name="email"></label> <span class="err"></span></div> 

    <div><label>Phone: <input name="phone"></label> <span class="err"></span></div> 

    <div><label>Password: <input type="password" name="password"></label> <span class="err"></span></div> 

    <button type="submit">Register</button> 

  </form> 

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> 

  <script src="validate.js"></script> 

</body> 

</html> 

validate.js 

$(function(){ 

  $("#regForm").on("submit", function(e){ 

    e.preventDefault(); 

    let valid = true; 

    $(".err").text(""); // clear errors 

    const name = $("input[name='name']").val().trim(); 

    const email = $("input[name='email']").val().trim(); 

    const phone = $("input[name='phone']").val().trim(); 

    const password = $("input[name='password']").val(); 

 

    if(name === "") { $("input[name='name']").next().text("Name required"); valid=false; } 

    if(!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(email)) { $("input[name='email']").next().text("Invalid email"); valid=false; } 

    if(!/^\d{10}$/.test(phone)) { $("input[name='phone']").next().text("Phone must be 10 digits"); valid=false; } 

    if(password.length < 6) { $("input[name='password']").next().text("Password must be ≥ 6 chars"); valid=false; } 

    if(valid) alert("Form submitted successfully!"); 

  }); 

}); */

/* 2d Source Code: 

index.html 

<!DOCTYPE html> 

<html lang="en"> 

<head> 

  <meta charset="UTF-8"> 

  <title>jQuery UI Demo</title> 

  <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css"> 

</head> 

<body> 

  <h1>jQuery UI Elements</h1> 

  <div id="tabs"> 

    <ul> 

      <li><a href="#tab-1">Home</a></li> 

      <li><a href="#tab-2">More</a></li> 

    </ul> 

    <div id="tab-1"> 

      <p>Slider Value: <span id="sliderVal">50</span></p> 

      <div id="slider"></div> 

      <button id="openModal">Open Modal</button> 

    </div> 

    <div id="tab-2"> 

      <p>Welcome to the second tab!</p> 

    </div> 

  </div> 

  <div id="dialog" title="Modal Window" style="display:none;"> 

    <p>This is a modal dialog using jQuery UI.</p> 

  </div> 

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> 

  <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script> 

  <script src="ui.js"></script> 

</body> 

</html> 

 

 

 

ui.js 

$(function(){ 

  // Tabs 

  $("#tabs").tabs(); 

 

  // Slider 

  $("#slider").slider({ 

    value: 50, 

    min: 0, 

    max: 100, 

    slide: function(event, ui){ 

      $("#sliderVal").text(ui.value); 

    } 

  }); 

  // Modal 

  $("#openModal").on("click", function(){ 

    $("#dialog").dialog({ modal: true }); 

  }); 

}); */

/* 2e Source Code: 

index.html 

<!DOCTYPE html> 

<html lang="en"> 

<head> 

  <meta charset="UTF-8"> 

  <title>JSON Rendering</title> 

</head> 

<body> 

  <h1>Articles</h1> 

  <ul id="articles"></ul> 

  <script src="render.js"></script> 

</body> 

</html> 

data.json 

{ 

  "articles": [ 

    {"id": 1, "title": "Intro to JavaScript", "summary": "Learn variables and functions"}, 

    {"id": 2, "title": "AJAX Basics", "summary": "How to fetch data from a server"}, 

    {"id": 3, "title": "jQuery UI", "summary": "Build interactive UI elements"} 

  ] 

} 

render.js 

fetch("data.json") 

  .then(res => res.json()) 

  .then(data => { 

    const list = document.getElementById("articles"); 

    list.innerHTML = data.articles.map(a => 

      `<li><b>${a.title}</b>: ${a.summary}</li>` 

    ).join(""); 

  }) 

  .catch(err => console.error("Error loading JSON:", err)); */



